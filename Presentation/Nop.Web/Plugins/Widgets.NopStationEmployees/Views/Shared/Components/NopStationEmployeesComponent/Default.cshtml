@model List<NopStationEmployeePublicModel>

<script src="~/Plugins/Widgets.NopStationEmployees/Contents/js/dist/browser/signalr.js"></script>
@* <script src="~/Plugins/Widgets.NopStationEmployees/Contents/js/chat.js"></script> *@
<script>
    "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("/testmessagehub").build();

    //Disable the send button until connection is established.
    document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (user, message) {
        var li = document.createElement("li");
        document.getElementById("messagesList").appendChild(li);
        // We can assign user-supplied strings to an element's textContent because it
        // is not interpreted as markup. If you're assigning in any other way, you
        // should be aware of possible script injection concerns.
        li.textContent = `${user} says ${message}`;
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = document.getElementById("userInput").value;
        var message = document.getElementById("messageInput").value;
        connection.invoke("SendMessageAsync", user, message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    }); "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("/testmessagehub").build();

    //Disable the send button until connection is established.
    document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (user, message) {
        var li = document.createElement("li");
        document.getElementById("messagesList").appendChild(li);
        // We can assign user-supplied strings to an element's textContent because it
        // is not interpreted as markup. If you're assigning in any other way, you
        // should be aware of possible script injection concerns.
        li.textContent = `${user} says ${message}`;
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = document.getElementById("userInput").value;
        var message = document.getElementById("messageInput").value;
        connection.invoke("SendMessageAsync", user, message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    });

</script>

<div>
    <h2 class="employee-head">Employee List</h2>
    <table class="employee-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Designation</th>
                <th>Country</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Model)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Designation</td>
                    <td>@employee.Country</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="container">
    <div class="row p-1">
        <div class="col-1">User</div>
        <div class="col-5"><input type="text" id="userInput" /></div>
    </div>
    <div class="row p-1">
        <div class="col-1">Message</div>
        <div class="col-5"><input type="text" class="w-100" id="messageInput" /></div>
    </div>
    <div class="row p-1">
        <div class="col-6 text-end">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <hr />
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>

<style>
    .employee-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 18px;
        text-align: left;
    }

        .employee-table thead tr {
            background-color: #f2f2f2;
            color: #333;
            font-weight: bold;
            text-align: center;
        }

        .employee-table th, .employee-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .employee-table tbody tr {
            border-bottom: 1px solid #ddd;
        }

            .employee-table tbody tr:nth-of-type(even) {
                background-color: #f9f9f9;
            }

            .employee-table tbody tr:last-of-type {
                border-bottom: 2px solid #248ece;
            }

            .employee-table tbody tr:hover {
                background-color: #f1f1f1;
            }

    .employee-head {
        padding-left: 37%;
    }
</style>
@* C:\nopStation\plugin update\nopstationplugin_470\src\Plugins\Nop.Plugin.Widget.NopStationEmployees\Contents\js\signalr\dist\browser\signalr.js *@



